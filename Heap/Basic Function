#include<iostream>

using namespace std;

//here we have used 1 based ordering it means oth index pr -1 rahega

class heap {
    public:
        int arr[100];
        int size;

    //making constructor
    heap() {
        arr[0] = -1;
        size = 0;
    }

    void insert(int val) {

        size = size + 1;
        int index = size;
        arr[size] = val;

        while(index > 1) {
            int parent = index/2;

            if(arr[index] > arr[parent]) {
                swap(arr[index], arr[parent]);
                index = parent;
            }else {
                return ;
            }
        }
    }

    void print() {
        for (int i = 1; i <=size; i++)
        {
            cout << arr[i] << " ";
        }
        cout << endl;
        
    }

    

    void deletefromheap() {
        if(size == 0) {
            cout << "Nothing to delete" <<endl;
        }

        int i=1;

        arr[i] = arr[size];
        size--;

        while(i < size) {
            int leftindex = i*2;
            int rightindex = i*2 + 1;

            if(leftindex < size && arr[leftindex] > arr[i]){
                swap(arr[i], arr[leftindex]);
                i = leftindex;
            }else if(rightindex < size && arr[rightindex] > arr[i]){
                swap(arr[i], arr[rightindex]);
                i = rightindex;
            }else {
                return ;
            }
        }
    }
};

void heapify(int arr[], int n, int i) {
        int largest = i;
        int left = 2*i;
        int right = 2*i+1;

        if(left <= n && arr[largest] < arr[left]) {
            //updating largest as per req.
            largest = left;
        }
        if(right <= n && arr[largest] < arr[right]) {
            largest = right;
        }

        if(largest != i) {
            swap(arr[largest], arr[i]);
            // baki elements ke liye compare krte hain
            heapify(arr, n, largest);
        }
}

void heapSort(int arr[], int n) {
    int size = n;
    while(size > 1) {
        //step-1
        swap(arr[size], arr[1]);
        size--;

        //step-2
        heapify(arr, size, 1);
    }
}

int main(){

    heap h;
    h.insert(50);
    h.insert(55);
    h.insert(53);
    h.insert(52);
    h.insert(54);
    h.print();

    //after deletion
    h.deletefromheap ();
    cout << "Printing the heap after deletion" << endl;
    h.print();

    int arr[6] = {-1, 54, 53, 55, 52, 50};
    int n=5;

    //0 se n/2 ko he bus krna hai baki root element hai usse farak nhi padega
    //-------------------   HEAP CREATION  ------------------------
    for(int i=n/2; i>0; i--) {
        heapify(arr, n, i);
    }
    cout << "printing the heap creation array" << endl;
    for (int i = 1; i <=n; i++){
            cout << arr[i] << " ";
        }cout << endl;


        // HEAP SORTING
        heapSort(arr, n);
    cout << "printing the heap sorting array" << endl;
    for (int i = 1; i <=n; i++){
            cout << arr[i] << " ";
        }cout << endl;


    return 0;
}
